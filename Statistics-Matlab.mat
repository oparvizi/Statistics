#%-----------Computational Statistics Handbook with MATLAB® Third Edition
#% Source: https://www.routledge.com/Computational-Statistics-Handbook-with-MATLAB/Martinez-Martinez/p/book/9781032179582

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------
#% Comparison Between Traditional Statistics and Computational Statistics
#% Traditional Statistics                                Computational Statistics
#% Small to moderate sample size                         Large to very large sample size
#% Independent, identically distributed data sets        Nonhomogeneous data sets
#% One or low dimensional                                High dimensional
#% Manually computational                                Computationally intensive
#% Mathematically tractable                              Numerically tractable
#% Well focused questions                                Imprecise questions
#% Strong unverifiable assumptions:                      Weak or no assumptions:
#%        Relationships (linearity,                      Relationships (nonlinearity)
#%        additivity)                                    Error structures (distribution free)
#% Error structures (normality)
#% Statistical inference                                 Structural inference
#% Predominantly closed form algorithms                  Iterative algorithms possible
#% Statistical optimality                                Statistical robustness

% Computational Statistics Toolbox:
% https://www.mathworks.com/products/statistics.html
% https://www.mathworks.com/help/stats/


%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 2: Probability Concepts--------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------
% Common Distributions-----------------------------
#% Binomial-----------------------------------------
#% Example: Suppose there is a 20% chance that an adult American suffers from a psychiatric disorder. % We randomly sample 25 adult Americans.
prob = binocdf(3,25,0.2);
prob2 = sum(binopdf(0:3,25,0.2));

#% Get the values for the domain, x.
x = 0:6;
#% Get the values of the probability mass function.
#% First for n = 6, p = 0.3:
pdf1 = binopdf(x,6,0.3);
#% Now for n = 6, p = 0.7:
pdf2 = binopdf(x,6,0.7);
#% Do the plots.
subplot(1,2,1),bar(x,pdf1,1,'w')
title(' n = 6, p = 0.3')
xlabel('X'),ylabel('f(X)')
axis square
subplot(1,2,2),bar(x,pdf2,1,'w')
title(' n = 6, p = 0.7')
xlabel('X'),ylabel('f(X)')
axis square

#% Poisson---------------------------------------------
#% Example: In preparing this text, we executed the spell check command, and the editor reviewed the manuscript for typographical errors. In spite of this, some
#% mistakes might be present. Assume that the number of typographical errors per page follows the Poisson distribution with parameter We calculate the 
#% probability that a page will have at least two errors as follows:
prob = 1-poisscdf(1,0.25);

#% Example: Suppose that accidents at a certain intersection occur in a manner that satisfies the conditions for a Poisson process with a rate of 2 per week
(lambda=2 ). What is the probability that at most 3 accidents will occur during the next 2 weeks?
prob = poisscdf(3,2*2);

#% Uniform----------------------------------------------
#% Example: In this example, we illustrate the uniform probability density function over the interval (0, 10), along with the corresponding cumulative distribution
function.
#% First get the domain over which we will 
#% evaluate the functions.
x = -1:.1:11;
% Now get the probability density function
#% values at x.
pdf = unifpdf(x,0,10);
#% Now get the cdf.
cdf = unifcdf(x,0,10);

#% Do the plots.
subplot(1,2,1),plot(x,pdf)
title('PDF')
xlabel('X'),ylabel('f(X)')
axis([-1 11 0 0.2])
axis square
subplot(1,2,2),plot(x,cdf)
title('CDF')
xlabel('X'),ylabel('F(X)')
axis([-1 11 0 1.1])
axis square
#% Normal-------------------------------------------------
#% Set up the parameters for the normal distribution.
mu = 5;
sigma = 2;
#% Set up the upper and lower limits. These are in 
#% the two element vector 'specs'.
specs = [2, 8];
prob = normspec(specs, mu, sigma);

#% Exponential---------------------------------------------
#% The time between arrivals of vehicles at an intersection follows an exponential distribution with a mean of 12 seconds. What is the probability that the time between arrivals is 10 seconds or less?
#% average interarrival time, so lambda=1/12. 
expcdf(x, 1/lambda)
csexpoc(x, lambda)

#% Gamma---------------------------------------------------
#% Example: We plot the gamma probability density function for lambda=t=1 (this should look like the exponential), lambda=t=2 , and lambda=t=3. 
#% First get the domain over which to 
% evaluate the functions.
x = 0:.1:3;
% Now get the functions values for
#% different values of lambda.
y1 = gampdf(x,1,1/1);
y2 = gampdf(x,2,1/2);
y3 = gampdf(x,3,1/3);
#% Plot the functions.
plot(x,y1,'r',x,y2,'g',x,y3,'b')
title('Gamma Distribution')
xlabel('X')
ylabel('f(x)')

#% Chi-Square ---------------------------------------------

#% Weibull-------------------------------------------------
#% Example: Suppose the time to failure of piston rings for stream-driven compressors can be modeled by the Weibull distribution with a location parameter of zero, β= 1/3, and α = 500.
weibcdf(x,α^−β,β)
csweibc(x,ν, α, β)

#% Beta----------------------------------------------------
#% We use the following MATLAB code to plot the beta density over the interval (0,1). First get the domain over which to evaluate
#% the density function.
x = 0.01:.01:.99;
% Now get the values for the density function.
y1 = betapdf(x,0.5,0.5);
y2 = betapdf(x,3,3);
#% Plot the results.
plot(x,y1,'r',x,y2,'g')
title('Beta Distribution')
xlabel('x')
ylabel('f(x)')

#% Student’s t Distribution--------------------------------
#% First we get the domain for the function.
x = -6:.01:6;
#% Now get the values for the density function.
y = tpdf(x,5);
#% Plot the results.
plot(x,y)
xlabel('x')
ylabel('f(x)')

#% Multivariate Normal (mvnpdf)----------------------------
function prob = csevalnorm(x,mu,cov_mat);
[n,d] = size(x);
#% center the data points
x = x-ones(n,1)*mu; 
a = (2*pi)^(d/2)*sqrt(det(cov_mat));
arg = diag(x*inv(cov_mat)*x');
prob = exp((-.5)*arg);
prob = prob/a;

#% Get the mean and covariance.
mu = zeros(1,2);
cov_mat = eye(2);% Identity matrix
#% Get the domain.
% Should range (-4,4) in both directions.
[x,y] = meshgrid(-4:.2:4,-4:.2:4);
#% Reshape into the proper format for the function.
X = [x(:),y(:)];
Z = csevalnorm(X,mu,cov_mat);
#% Now reshape the matrix for plotting.
z = reshape(Z,size(x));
subplot(1,2,1) % plot the surface
surf(x,y,z),axis square, axis tight
title('BIVARIATE STANDARD NORMAL')

subplot(1,2,2) % look down on the surface
pcolor(x,y,z),axis square
title('BIVARIATE STANDARD NORMAL')
#% Now do the same thing for a covariance matrix with non-zero off-diagonal elements.
cov_mat = [1 0.7 ; 0.7 1];
Z = csevalnorm(X,mu,cov_mat);
z = reshape(Z,size(x));
subplot(1,2,1)
surf(x,y,z),axis square, axis tight
title('BIVARIATE NORMAL')
subplot(1,2,2)
pcolor(x,y,z),axis square
title('BIVARIATE NORMAL')

#% Multivariate t Distribution-----------------------------
#% First set up a correlation matrix with high negative correlation.
Rneg = [1, -0.8; -0.8, 1];
nu = 5;
#% Get the domain for the pdf.
x = -4:.1:4; 
y = -4:.1:4;
[X,Y] = meshgrid(x,y);
#% Evaluate the pdf.
z = mvtpdf([X(:) Y(:)],Rneg,nu);
#% Reshape to a matrix and plot.
z = reshape(z,length(x),length(y));
surf(x,y,z);
xlabel('x'); 
ylabel('y'); 
zlabel('f(x,y)');
axis tight

#% List of Functions--------------------------------------
#% Distribution               MATLAB Function
#% Beta                       csbetap
#%                            csbetac
#% Binomial                   csbinop
#%                            csbinoc
#% Chi-square                 cschip
#%                            cschic
#% Exponential                csexpop
#%                            csexpoc
#% Gamma                      csgammp
#%                            csgammc
#% Normal – univariate        csnormp
#%                            csnormc
#% Normal – multivariate      csevalnorm
#% Poisson                    cspoisp
#%                            cspoisc
#% Continuous uniform         csunifp
#%                            csunifc
#% Weibull                    csweibp
#%                            csweibc

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 3: Sampling Concepts-----------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------
#% types of simple random sampling: sampling with replacement and sampling without replacement.
mean(x,dim)
std(x)
var(x)
#% Sample Moments----------------------------
#% Example: In this example, we will generate a random sample that is uniformly distributed over the interval (0, 1). We would expect this sample to have a
#% coefficient of skewness close to zero because it is a symmetric distribution. We would expect the kurtosis to be different from 3 because the random
#% sample is not generated from a normal distribution. 
#% Generate a random sample from the uniform distribution.
n = 2000;
x = rand(1,n);
#% Find the mean of the sample.
mu = mean(x);
% Find the numerator and denominator for gamma_1.
num = (1/n)*sum((x-mu).^3);
den = (1/n)*sum((x-mu).^2);
gam1 = num/den^(3/2);

#% Find the kurtosis.
num = (1/n)*sum((x-mu).^4);
den = (1/n)*sum((x-mu).^2);
gam2 = num/den^2;

#% Covariance---------------------------------
#% First load the data.
load cement
#% Now get the transformations.
xr = 1./x;
logy = log(y);
#% Now get a scatterplot of the data to see if the relationship is linear.
plot(xr,logy,'x')
axis([0 1.1 2.4 4])
xlabel('Reciprocal of Drying Time')
ylabel('Log of Tensile Strength')
#% Now get the covariance and the correlation coefficient.
cmat = cov(xr,logy);
cormat = corrcoef(xr,logy);

% Sampling Distributions-----------------------
#% CENTRAL LIMIT THEOREM----------
#% Let represent a probability density with finite variance (Sigma^2) and mean . Also, let X be the sample mean for a random sample of size n drawn from this distribution.
#% For large n, the distribution of X is approximately normally distributed with mean and variance given by sigma^2/n.

#% Parameter Estimation: maximum likelihood estimation, Bayes estimators, minimax estimation, Pitman estimators, interval estimates, robust estimation
#% Suggested Point Estimators for Parameters
#% Distribution           Suggested           Estimator MATLAB Function
#% Binomial               Page 73             csbinpar
#% Exponential                                csexpar
#% Gamma                                      csgampar
#% Normal                                     mean, var
#% Multivariate normal                        mean, cov
#% Poisson                                    cspoipar

#% Empirical Distribution Function------------------------
#% Quantiles----------------------------------------------
% #Generate the random sample and sort.
x = sort(rand(1,100));
#% Find the median of the lower half - first quartile.
q1 = median(x(1:50)); 
#% Find the median.
q2 = median(x);
#% Find the median of the upper half - third quartile.
q3 = median(x(51:100));

#% interp1------------------------------------------------
#% general syntax is: yint = interp1(xobs, yobs, xint);
#% First generate some standard normal data.
x = randn(500,1);
#% Now get the order statistics. These will serve as the observed values for the ordinate (Y_obs).
xs = sort(x);
#% Now get the observed values for the abscissa (X_obs).
n=length(x);
phat = ((1:n)-0.5)/n;
#% We want to get the quartiles.
p = [0.25, 0.5, 0.75];
#% The following provides the estimates of the quartiles using linear interpolation.
qhat = interp1(phat,xs,p);

% List of MATLAB functions for calculating statistics--------------------------------
#% Purpose                                      MATLAB Function
#% standard MATLAB package                      mean, var, std, cov, median, corrcoef, max, min, sort
#% MATLAB Statistics Toolbox                    harmmean, iqr, kurtosis, mad, moment, prctile, range, skewness, trimmean
#% Statistics Toolbox functions provide         betafit, binofit, expfit, gamfit, normfit, poissfit, weibfit, unifit, mle
#% the maximum likelihood estimates for 
#% distributions.
#% used to obtain parameter estimates for       csbinpar, csexpar, csgampar, cspoipar, csunipar
#% a distribution.
#% return the quantiles.                        csbinoq, csexpoq, csunifq, csweibq, csnormq, csquantiles
#% descriptive statistics                       csmomentc, cskewness, cskurtosis, csmoment, csecdf


%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 4: Generating Random Variables-------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------
#% General Techniques: Uniform Random Numbers: uniformly distributed on the interval (0,1).
rng(seed)
rng('default')

#% Obtain a vector of uniform random variables in (0,1).
x = rand(1,1000);
#% Do a histogram to plot.First get the height of the bars.
[N,X] = hist(x,15);
#% Use the bar function to see the distribution.
bar(X,N,1,'w')
title('Histogram of Uniform Random Variables')
xlabel('X')
ylabel('Frequency') 

#% Generate 3 random samples of size 5.
x = zeros(3,5); % Allocate the memory.
for i = 1:3
 rng(i) % set the seed
 x(i,:) = rand(1,5);
end
#% recover the five random variables generated in the second
sample
rng(2)
xt = rand(1,5);

% Inverse Transform Method--------------

#% Set up storage space for the variables.
n = 1000;
X = zeros(1,n);
#% These are the x's in the domain:
x = 0:2; 
#% These are the probability masses for each x:
pr = [0.3 0.2 0.5]; 
#% Generate 1000 random variables from the desired distribution.
for i = 1:n
 u = rand; % Generate the U.
 if u <= pr(1)
 X(i) = x(1);
 elseif u <= sum(pr(1:2)) 
#% It has to be between 0.3 and 0.5.
 X(i) = x(2);
 else 
 X(i) = x(3); % It has to be between 0.5 and 1.
 end
end

#% Find the proportion of each number.
x0 = length(find(X==0))/n;
x1 = length(find(X==1))/n;
x2 = length(find(X==2))/n;

% Acceptance-Rejection Method------------------------
#% Example: We shall illustrate the acceptance-rejection method by generating random variables from the beta distribution with parameters α = 2 β = 1.

c = 2; % constant 
n = 100; % Generate 100 random variables.
#% Set up the arrays to store variates.
x = zeros(1,n); % random variates
xy = zeros(1,n);% corresponding y values
rej = zeros(1,n);% rejected variates
rejy = zeros(1,n); % corresponding y values
irv = 1;
irej = 1;
while irv <= n
 y = rand(1); % random number from g(y)
 u = rand(1); % random number for comparison
 if u <= 2*y/c;
 x(irv) = y;
 xy(irv) = u*c;
 irv = irv+1
 else
 rej(irej) = y;
 rejy(irej) = u*c; % really comparing u*c<=2*y
 irej = irej + 1
 end
end

% Generating Continuous Random Variables------------------------------------
#% Normal Distribution---------
X = Z ⋅ σ + μ.
#% Exponential Distribution------
#% Set up the parameters.
lam = 2;
n = 1000;
#% Generate the random variables.
uni = rand(1,n);
X = -log(uni)/lam;
#% Get the values to draw the theoretical curve.
x = 0:.1:5;
#% This is a function in the Statistics Toolbox.
y = exppdf(x,1/2);
#% Get the information for the histogram.
[N,h] = hist(X,10);
#% Change bar heights to make it correspond to the theoretical density - see Chapter 5.
N = N/(h(2)-h(1))/n;
% Do the plots.
bar(h,N,1,'w')
hold on
plot(x,y)
hold off
xlabel('X')
ylabel('f(x) - Exponential')

#% Gamma-----------
n = 1000;
t = 3;
lam = 2;
#% Generate the uniforms needed. Each column contains the t uniforms for a realization of a gamma random variable.
U = rand(t,n);
#% Transform according to Equation 4.13. See Example 4.8 for an illustration of Equation 4.14.
logU = -log(U)/lam;
X = sum(logU);

#% Now do the histogram.
[N,h] = hist(X,10);
#% Change bar heights.
N = N/(h(2)-h(1))/n;
#% Now get the theoretical probability density. This is a function in the Statistics Toolbox.
x = 0:.1:6;
y = gampdf(x,t,1/lam);
bar(h,N,1,'w')
hold on
plot(x,y,'k')
hold off

#% Chi-Square--------------
#% function X = cschirnd(n,nu). This function will return n chi-square random variables with degrees of freedom nu.
function X = cschirnd(n,nu)
#% Generate the uniforms needed. 
rm = rem(nu,2);
k = floor(nu/2);
if rm == 0 % then even degrees of freedom
 U = rand(k,n);
 if k ~= 1
 X = -2*log(prod(U));
 else
 X = -2*log(U);
 end
else % odd degrees of freedom
 U = rand(k,n);
 Z = randn(1,n);
 if k ~= 1
 X = Z.^2-2*log(prod(U));
 else
 X = Z.^2-2*log(U);
 end
end

#% Beta-------------------
rvs = pdfrnd(par1,par2,nrow,ncol);  

#% Let a = 3, b = 3
n = 500;
a = 3;
b = 3;
rvs = betarnd(a,b,1,n);
#% Now do the histogram.
[N,h] = hist(rvs,10);
#% Change bar heights.
N = N/(h(2)-h(1))/n;
#% Now get the theoretical probability density.
x = 0:.05:1;
y = betapdf(x,a,b);
plot(x,y)
axis equal
bar(h,N,1,'w')
hold on
plot(x,y,'k')
hold off 

#% Multivariate Normal----------------
#% function X = csmvrnd(mu,covm,n); This function will return n multivariate random normal variables with d-dimensional mean mu and covariance matrix covm. Note that the covariance
#% matrix must be positive definite (all eigenvalues are greater than zero), and the mean vector is a column 
function X = csmvrnd(mu,covm,n)
d = length(mu);
#% Get Cholesky factorization of covariance.
R = chol(covm);
#% Generate the standard normal random variables.
Z = randn(n,d);
X = Z*R + ones(n,1)*mu';

#% Generate the multivariate random normal variables.
mu = [-2;3];
covm = [1 0.7 ; 0.7 1];
X = csmvrnd(mu,covm,500);

#% Multivariate Student’s t Distribution-----------
#% Generate multivariate normal random variables.
R = [1 -.8; -.8 1]; % Correlation matrix. 
df = 5;
d = 2;
n = 500;
#% Generate n 2-D multivariate normal random variables, centered at 0, with covariance C. 
C = chol(R);
Xnorm = randn(n,d)*C;
#% Generate chi-square random variables and divide by the degrees of freedom.
Xchi = sqrt(chi2rnd(df,n,1)./df);
#% Divide to get the multivariate t random variables.
Xt = Xnorm./repmat(Xchi(:),1,d);
#% Do a scatterplot.
plot(Xt(:,1),Xt(:,2),'.');
xlabel('X_1');ylabel('X_2');
title('Multivariate t Random Variables with \nu = 5')
#% check the correlation
corrcoef(Xt)

#% Generating Variates on a Sphere--------------
#% function X = cssphrnd(n,d); This function will generate n d-dimensional random variates that are distributed on the unit d-dimensional sphere. d >= 2
function X = cssphrnd(n,d)
if d < 2
 error('ERROR - d must be greater than 1.')
 break
end
#% Generate standard normal random variables.
tmp = randn(d,n);
#% Find the magnitude of each column. Square each element, add, and take the square root. 
mag = sqrt(sum(tmp.^2));
#% Make a diagonal matrix of them - inverses.
dm = diag(1./mag);
#% Multiply to scale properly. Transpose so X contains the observations.
X = (tmp*dm)';

X = cssphrnd(500,2);
plot(X(:,1),X(:,2),'x')
axis equal
xlabel('X_1'),ylabel('X_2')

#% Generating Discrete Random Variables----------------
#% Binomial-----------------
#% function X = csbinrnd(n,p,N). This function will generate N binomial random variables with parameters n and p.
function X = csbinrnd(n,p,N)
X = zeros(1,N);
#% Generate the uniform random numbers: N variates of n trials.
U = rand(N,n);
#% Loop over the rows, finding the number less than p
for i = 1:N
 ind = find(U(i,:) <= p);
 X(i) = length(ind);
end
X = sum(rand(n,N) <= p);

#% Poisson--------------------
#% function X = cspoirnd(lam,n). This function will generate Poisson random variables with parameter lambda. The reference for this is Ross, 1997, page 50.
function x = cspoirnd(lam,n)
x = zeros(1,n);
j = 1;
while j <= n
 flag = 1;
#% initialize quantities
 u = rand(1);
 i = 0;
 p = exp(-lam);
 F = p;
 while flag % generate the variate needed
 if u <= F % then accept
 x(j) = i;
 flag = 0;
 j = j+1;
 else % move to next probability
 p = lam*p/(i+1);
 i = i+1;
 F = F + p;
 end
 end
end

#% Set the parameter for the Poisson.
lam = 0.5;
N = 5000; % Sample size
x = cspoirnd(lam,N);
edges = 0:max(x);
f = histc(x,edges);
bar(edges,f/N,1,'w')

#% Determine the observed relative frequencies. These are the estimated values.
relf = zeros(1,max(x)+1);
for i = 0:max(x)
 relf(i+1) = length(find(x==i))/N;
end
#% Use the Statistics Toolbox function to get the theoretical values.
y = poisspdf(0:4,.5); 

#% Discrete Uniform-----------------------
#% function X = csdunrnd(N,n). This function will generate random variables from the discrete uniform distribution. It picks numbers uniformly between 1 and N.
function X = csdunrnd(N,n)
X = ceil(N*rand(1,n));

N = 5;
n = 500;
x = csdunrnd(N,n);
#% Determine the estimated relative frequencies.
relf = zeros(1,N);
for i = 1:N
 relf(i) = length(find(x==i))/n;
end

#% Toolbox for Generating Random Variables-----------------
#% MATLAB® Code-----------------
#% Distribution         MATLAB Function
#% Beta                 betarnd
#% Binomial             binornd
#% Chi-square           chi2rnd
#% Discrete uniform     unidrnd
#% Exponential          exprnd
#% Gamma                gamrnd
#% Normal               normrnd
#% Poisson              poissrnd
#% Continuous uniform   unifrnd
#% Weibull              weibrnd
#% Multivariate normal  mvnrnd
#% Multivariate t       mvtrnd
#% Copulas              copularnd

#% Computational Statistics Toolbox------------------------
#% Distribution           MATLAB Function
#% Beta                   csbetarnd
#% Binomial               csbinrnd
#% Chi-square             cschirnd
#% Discrete uniform       csdunrnd
#% Exponential            csexprnd
#% Gamma                  csgamrnd
#% Multivariate normal    csmvrnd
#% Poisson                cspoirnd
#% Points on a sphere     cssphrnd

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 5: Exploratory Data Analysis---------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------
#% Exploring Univariate Data----------------

#% Histograms--------------
#% histogram of the data in forearm
% The hist function optionally returns the
% bin centers and frequencies.
[n,x] = hist(forearm);
% Plot and use the argument of width=1
% to produce bars that touch.
bar(x,n,1);
axis square
title('Frequency Histogram')
% Now create a relative frequency histogram.
% Divide each box by the total number of points.
subplot(1,2,2)
bar(x,n/140,1)
title('Relative Frequency Histogram')
axis square

#% explore the forearm data using a density histogram
% Get parameter estimates for the normal distribution.
mu = mean(forearm);
v = var(forearm);
% Obtain normal pdf based on parameter estimates.
xp = linspace(min(forearm),max(forearm));
yp = csnormp(xp,mu,v);
% Get the information needed for a histogram.
[nu,x] = hist(forearm);
% Get the widths of the bins.
h = x(2)-x(1);
% Plot as density histogram - Equation 5.1.
bar(x,nu/(140*h),1)
hold on
plot(xp,yp)
xlabel(‘Length (inches)’)
title('Density Histogram and Density Estimate')
hold off

#% Stem-and-Leaf----------------
load tibetan
% This loads up all 5 measurements of the skulls.
% We use the fourth characteristic to illustrate
% the stem-and-leaf plot. We first round them.
x = round(tibetan(:,4));
csstemleaf(x)
title('Height (mm) of Tibetan Skulls')

#% Quantile-Based Plots — Continuous Distributions-------
% Generate the random variables.
x = randn(1,75);
y = randn(1,75);
% Find the order statistics.
xs = sort(x);
ys = sort(y);
% Now construct the q-q plot.
plot(xs,ys,'o')
xlabel('X - Standard Normal')
ylabel('Y - Standard Normal')
axis equal


% Generate the random variables.
m = 50;
n = 75;
x = randn(1,n);
y = randn(1,m);
% Find the order statistics for y.
ys = sort(y);
% Now find the associated quantiles using the x.
% Probabilities for quantiles:
p = ((1:m) - 0.5)/m;
xs = csquantiles(x,p);
% Construct the plot.
plot(xs,ys,'ko')
% Get the reference line.
% Use the 1st and 3rd quartiles of each set to
% get a line.
qy = csquantiles(y,[0.25,0.75]);
qx = csquantiles(x,[0.25,0.75]);
[pol, s] = polyfit(qx,qy,1);
% Add the line to the figure.
yhat = polyval(pol,xs);
hold on
plot(xs,yhat,'k')
xlabel('Sample Quantiles - X'),
ylabel('Sorted Y Values')
hold off


% Generate a random sample from a standard normal.
x = randn(1,100);
% Get the probabilities.
prob = ((1:100)-0.5)/100;
% Now get the theoretical quantiles.
qp = norminv(prob,0,1);
% Now plot theoretical quantiles versus
% the sorted data.
plot(sort(x),qp,'ko')
xlabel('Sorted Data')
ylabel('Standard Normal Quantiles')


% Generate a random sample from a
% uniform distribution.
x = rand(1,100);
% Get the probabilities.
prob = ((1:100)-0.5)/100;
% Now get the theoretical quantiles.
qp = norminv(prob,0,1);
% Now plot theoretical quantiles versus
% the sorted data.
plot(sort(x),qp,'ko')
ylabel('Standard Normal Quantiles')
xlabel('Sorted Data')

#% Quantile Plots — Discrete Distributions--------------------
k = 0:6; % vector of counts
n_k = [156 63 29 8 4 1 1];
N = sum(n_k);
% Get vector of factorials.
fact = zeros(size(k));
for i = k
fact(i+1) = factorial(i);
end
% Get phi(n_k) for plotting.
phik = log(fact.*n_k/N);
% Find the counts that are equal to 1.
% Plot these with the symbol 1.
% Plot rest with a symbol.
ind = find(n_k~=1);
plot(k(ind),phik(ind),'o')
ind = find(n_k==1);
if ~isempty(ind)
text(k(ind),phik(ind),'1')
end
% Add some white space to see better.
axis([-0.5 max(k)+1 min(phik)-1 max(phik)+1])
xlabel('Number of Occurrences - k')
ylabel('\phi (n_k)')

#% Binomialness Plot----------------------------
% Poissonness plot - modified
k = 0:6; % vector of counts
% Find n*_k.
n_k = [156 63 29 8 4 1 1];
N = sum(n_k);
phat = n_k/N;
nkstar = n_k-0.67-0.8*phat;
% Get vector of factorials.
fact = zeros(size(k));
for i = k
fact(i+1) = factorial(i);
end
% Find the frequencies that are 1; nkstar=1/e.
ind1 = find(n_k==1);
nkstar(ind1)= 1/2.718;
% Get phi(n_k) for plotting.
phik = log(fact.*nkstar/N);
ind = find(n_k~=1);
plot(k(ind),phik(ind),'o')
if ~isempty(ind1)
text(k(ind1),phik(ind1),'1')
end
% Add some white space to see better.
axis([-0.5 max(k)+1 min(phik)-1 max(phik)+1])
xlabel('Number of Occurrences - k')
ylabel('\phi (n^*_k)')


% Binomialness plot.
k = 0:9;
n = 10;
n_k = [1 3 4 23 25 19 18 5 1 1];
N = sum(n_k);
nCk = zeros(size(k));
for i = k
nCk(i+1) = nchoosek(n,i);
% nchoosek is a function in basic MATLAB.
end
phat = n_k/N;
nkstar = n_k-0.67-0.8*phat;
% Find the frequencies that are 1; nkstar=1/e.
ind1 = find(n_k==1);
nkstar(ind1) = 1/2.718;
% Get phi(n_k) for plotting.
phik = log(nkstar./(N*nCk));
% Find the counts that are equal to 1.
ind = find(n_k~=1);
plot(k(ind),phik(ind),'o')
if ~isempty(ind1)
text(k(ind1),phik(ind1),'1')
end
% Add some white space to see better.
axis([-0.5 max(k)+1 min(phik)-1 max(phik)+1])
xlabel('Number of Females - k')
ylabel('\phi (n^*_k)')

#% Box Plots---------------------
% Generate a sample from the uniform distribution.
xunif = rand(100,1);
% Generate sample from the standard normal.
xnorm = randn(100,1);
% Generate a sample from the exponential distribution.
% NOTE: this function is from the Statistics Toolbox.
xexp = exprnd(1,100,1);
% Construct a boxplot with notches.
boxplot([xunif,xnorm,xexp],'notch','on')


% Use data similar to that in Example 5.10, but
% but make it different sample sizes. We need to
% store in a cell array.
X{1} = rand(50,1); % uniform
X{2} = randn(100,1); % normal
X{3} = exprnd(1,500,1); % exponential
% Construct a histplot. This function is
% included in the Computational Statistics Toolbox.
boxp(X,'hp')
title('Histplot of Uniform, Normal, Exponential')


% Construct a box-percentile plot. This function is
% included in the Computational Statistics Toolbox.
boxprct(X)
title('Box-Percentile Plot')

#% Exploring Bivariate and Trivariate Data---------------
#% Scatterplots----------------------------

% Create a positive definite covariance matrix.
vmat = [2, 1.5; 1.5, 9];
% Create mean at (2,3).
mu = [2 3];
[u,s,v] = svd(vmat);
vsqrt = ( v*(u'.*sqrt(s)))';
% Get standard normal random variables.
td = randn(250,2);
% Use x=z*sigma+mu to transform - see Chapter 4.
data = td*vsqrt+ones(250,1)*mu;
% Create a scatterplot using the plot function.
% Figure 5.16.
plot(data(:,1),data(:,2),'x')
axis equal
% Create a scatterplot using the scatter function.


% Figure 5.17.
% Use filled-in markers.
scatter(data(:,1),data(:,2),'filled')
axis equal
box on

#% Surface Plots---------------------
% Create a bivariate standard normal.
% First create a grid for the domain.
[x,y] = meshgrid(-3:.1:3,-3:.1:3);
% Evaluate using the bivariate standard normal.
z = (1/(2*pi))*exp(-0.5*(x.^2+y.^2));
% Do the plot as a surface.
surf(x,y,z)

#% Contour Plots------------------------
% Get the data for plotting.
[x,y,z] = peaks;
% Create a 2D contour plot with labels.
% This returns the information for the labels.
c = contour(x,y,z);
% Add the labels to the plot.
clabel(c)

% Create a 2D filled contour plot.
contourf(x,y,z,15)

contour3(x,y,z,15)

#% Bivariate Histogram----------------------
% Generate sample that is
% standard normal in each dimension.
n = 1000;
d = 2;
x = randn(n,d);
% Need bin origins.


bin0 = [floor(min(x(:,1))) floor(min(x(:,2)))];
% The bin widths - h - are covered later.
h = 3.504*n^(-0.25)*ones(1,2);
% find the number of bins
nb1 = ceil((max(x(:,1))-bin0(1))/h(1));
nb2 = ceil((max(x(:,2))-bin0(2))/h(2));
% find the mesh
t1 = bin0(1):h(1):(nb1*h(1)+bin0(1));
t2 = bin0(2):h(2):(nb2*h(2)+bin0(2));
[X,Y] = meshgrid(t1,t2);
% Find bin frequencies.
[nr,nc] = size(X);
vu = zeros(nr-1,nc-1);
for i = 1:(nr-1)
for j = 1:(nc-1)
xv = [X(i,j) X(i,j+1) X(i+1,j+1) X(i+1,j)];
yv = [Y(i,j) Y(i,j+1) Y(i+1,j+1) Y(i+1,j)];
in = inpolygon(x(:,1),x(:,2),xv,yv);
vu(i,j) = sum(in(:));
end
end
Z = vu/(n*h(1)*h(2));
% Get some axes that make sense.
[XX,YY] = meshgrid(linspace(-3,3,nb1),...
linspace(-3,3,nb2));
surf(XX,YY,Z)

#% MATLAB function bar3----------------
% The Z matrix was obtained in Example 5.15.
bar3(Z,1)
% Use some Handle Graphics.
set(gca,'YTickLabel',' ','XTickLabel',' ')
set(gca,'YTick',0,'XTick',0)
grid off

#% MATLAB function his3-------------------
% Make a histogram with see-through bars. The
% hist3 function is in the Statistics Toolbox.
% We use the data (x) generated in Example 5.15.
hist3(x,[10 10],'FaceAlpha',0.35);
set(gcf,'renderer','opengl');
axis tight


% Plot the 2D histogram as a scatterplot with
% heights proportional to marker size.
% Find the bin centers to use in the scatterplot.
n1 = length(t1);
n2 = length(t2);
tt1 = linspace((t1(1)+t1(2))/2,...
(t1(n1-1)+t1(n1))/2,nb1);
tt2 = linspace((t2(1)+t2(2))/2,...
(t2(n2-1)+t2(n2))/2,nb2);
[xxs,yys] = meshgrid(tt1,tt2);
scatter(xxs(:),yys(:),(Z(:)+eps)*1000,...
(Z(:)+eps)*1000,'filled')
% Create a colorbar and set the axis
% to the correct scale
h_ax = colorbar;
% Get the current labels.
temp = get(h_ax,'Yticklabel');
[nr,nc] = size(temp);
% Convert from strings to numbers.
newlab = cell(nr,1);
tempcell = cellstr(temp);
% Re-scale and convert back to numbers.


for i=1:nr
newlab{i}=num2str((str2num(tempcell{i})/1000));
end
set(h_ax,'Yticklabel',newlab)

#% 3D Scatterplot---------------
% Load the insect data
load insect
% Create a 3D scatter plot using a different color
% and marker for each class of insect.
% Plot the first class and hold the plot.
plot3(insect(1:10,1),insect(1:10,2),...
insect(1:10,3),'ro')
hold on
% Plot the second class.
plot3(insect(11:20,1),insect(11:20,2),...
insect(11:20,3),'kx')
% Plot the third class.
plot3(insect(21:30,1),insect(21:30,2),...
insect(21:30,3),'b*')
grid on, hold off

#% Exploring Multi-Dimensional Data-----------------------
#% Scatterplot Matrix---------------------
load iris
% This loads up three matrices, one for each species.
% Get the plotmatrix display of the Iris setosa data.
[H,ax,bigax,P] = plotmatrix(setosa);
axes(bigax),title('Iris Setosa')

% Create the labels as a cell array of strings.
labs = {'Sepal Length','Sepal Width',...
'Petal Length', 'Petal Width'};
[H,ax,bigax,P] = plotmatrix(virginica);
axes(bigax)
title('Virginica')
% Delete the histograms.
delete(P)
%Put the labels in - the positions might have
% to be adjusted depending on the text.
for i = 1:4
txtax = axes('Position',get(ax(i,i),'Position'),...
'units','normalized');
text(.1, .5,labs{i})
set(txtax,'xtick',[],'ytick',[],...
'xgrid','off','ygrid','off','box','on')
end

#% Slices and Isosurfaces--------------
% Create a grid for the domain.
[x,y,z] = meshgrid(-3:.5:3,-3:.5:3,-3:.5:3);
[n,d] = size(x(:));
% Evaluate the trivariate standard normal.
a = (2*pi)^(3/2);
arg = (x.^2 + y.^2 + z.^2);
prob = exp((-.5)*arg)/a;
% Slice through the x=0, y=0, z=0 planes.
slice(x,y,z,prob,0,0,0)
xlabel('X Axis')
ylabel('Y Axis')
zlabel('Z Axis')
% Add a colorbar.
colorbar


% Get some data that will be between 0 and 1.
data = rand(10,10,10);
data = smooth3(data,'gaussian');
% Just in case there are some figure windows
% open - we should start anew.
close all
for i = [0.4 0.6]
figure
hpatch = patch(isosurface(data,i),...
'Facecolor','blue',...
'Edgecolor','none',...
'AmbientStrength',.2,...
'SpecularStrength',.7,...
'DiffuseStrength',.4);
isonormals(data,hpatch)
title(['f(x,y,z) = ' num2str(i)])
daspect([1,1,1])
axis tight
axis off
view(3)
camlight right
camlight left
lighting phong
drawnow
end


for i=[0.4 0.6]
figure
hpatch = patch(isosurface(data,i),...
'Facecolor','blue',...
'Edgecolor','none',...
'AmbientStrength',.2,...
'SpecularStrength',.7,...
'DiffuseStrength',.4);
isonormals(data,hpatch)
patch(isocaps(data,i),...
'Facecolor','interp',...
'EdgeColor','none')
colormap hsv
title(['f(x,y,z) = ' num2str(i)])
daspect([1,1,1])
axis tight, axis off
view(3), camlight right, camlight left
lighting phong
drawnow
end

#% Glyphs------------------------
load cereal
% This file contains the labels and
% the matrix of 8 observations.
glyphplot(X, 'Glyph','face')
% Construct the stars and face plot using the
% Statistics Toolbox function.
% The following produces a star plot.
glyphplot(cereal)
glyphplot(cereal,'glyph','face','Obslabels',labs)
box on
title('Chernoff Face Plot of Cereal Data')



% Get the domain.
t = linspace(-pi,pi);
% Evaluate function values for each observation.
f1 = 2/sqrt(2)+6*sin(t)+4*cos(t);
f2 = 5/sqrt(2)+7*sin(t)+3*cos(t);
f3 = 1/sqrt(2)+8*sin(t)+9*cos(t);
plot(t,f1,'.',t,f2,'*',t,f3,'o')
legend('F1','F2','F3')
xlabel('t')



load iris
% This defines the domain that will be plotted.
theta = (-pi+eps):0.1:(pi-eps);
n = 50;
p = 4;
ysetosa = zeros(n,p);
% There will n curves plotted,
% one for each data point.
yvirginica = zeros(n,p);
% Take dot product of each row with observation.
ang = zeros(length(theta),p);
fstr = '[1/sqrt(2) sin(i) cos(i) sin(2*i)]';
k = 0;
% Evaluate sin and cos functions at each angle theta.
for i = theta
k = k+1;
ang(k,:) = eval(fstr);
end
% Now generate a ‘y’ for each observation.
for i = 1:n
for j = 1:length(theta)
% Find dot product with observation.
ysetosa(i,j)=setosa(i,:)*ang(j,:)';
yvirginica(i,j)=virginica(i,:)*ang(j,:)';
end
end
% Do all of the plots.
plot(theta,ysetosa(1,:),'r',...
theta,yvirginica(1,:),'b-.')
legend('Iris Setosa','Iris Virginica')
hold
for i = 2:n
plot(theta,ysetosa(i,:),'r',...
theta,yvirginica(i,:),'b-.')
end
hold off
title('Andrews Plot')
xlabel('t')
ylabel('Andrews Curve')

#% Parallel Coordinates-----------------
c = [1 3 7 2];
% Get range of parallel axes.
x = [1 7];
% Plot the 4 parallel axes.
plot(x,zeros(1,2),x,ones(1,2),x,...
2*ones(1,2),x,3*ones(1,2))
hold on
% Now plot point c as a polygonal line.
plot(c,0:3,c,0:3,'*')
ax = axis;
axis([ax(1) ax(2) -1 4 ])
set(gca,'ytick',0)
hold off


% Get a covariance matrix with correlation 1.
covmat = [1 1; 1 1];
% Generate the bivariate normal random variables.
% Note: you could use csmvrnd to get these.
[u,s,v] = svd(covmat);
vsqrt = (v*(u'.*sqrt(s)))';
subdata = randn(20,2);
data = subdata*vsqrt;
% Create parallel plot using CS Toolbox function.
csparallel(data)
title('Correlation of 1')


covmat = [4 1.2; 1.2, 9];


load iris
figure
csparallel(setosa,'-.')
hold on
csparallel(virginica,'-')
hold off


Purpose                   MATLAB Function
MATLAB
Discrete data plots       stem, stairs
Contour plots             contour
Histogram                 hist
Plots                     plot, plot3
Scatterplot               scatter, scatter3
Scatterplot matrix        plotmatrix

MATLAB Statistics Toolbox
Andrews curves                   andrewsplot
Boxplot                          boxplot
Empirical CDF                    cdfplot
Glyph plot (faces and stars)     glyphplot
Grouped scatterplot              gscatter
Grouped scatterplot matrix       gplotmatrix
Histogram of empirical CDF       ecdfhist
Histogram — bivariate            hist3
Normal probability plot          normplot
Parallel coordinate plot         parallelcoords
Probability plots                probplot
Quantile–quantile plot           qqplot
Scatterplot with histograms      scatterhist
Weibull probability plot         wblplot


Star plot                        csstars
Stem-and-leaf plot               csstemleaf
Box Plot — variable width and    boxp
histplot
Box-percentile plot              boxprct
Parallel coordinates plot        csparallel
Q-Q plot                         csqqplot
Poissonness plot                 cspoissplot
Andrews curves                   csandrews
Exponential probability plot     csexpoplot
Binomial plot                    csbinoplot

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 6: Finding Structure-----------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------
#% Projecting Data------------------------
% Specify some data.
X = [-2 4; 2 4;6 1;8 10;7 5;11 8];
% Create the projection matrix.
theta = pi/4;
c2 = cos(theta)^2;
cs = cos(theta)*sin(theta);
s2 = sin(theta)^2;
P = [c2 cs; cs s2];
% Now project the data onto the line.
Xp = X*P;
% Create the plot shown in Figure 6.1.
plot(Xp(:,1),Xp(:,2),'d',X(:,1),X(:,2),'o')
hold on
plot([0 12 ], [0 12 ], ':')
hold off
axis([-4 12 0 12])

#% Principal Component Analysis-----------------
load glassdata
[n,d] = size(glassdata);
% Center the data.
Xc = glassdata - repmat(sum(glassdata)/n,n,1);
% Find the covariance matrix.
covm = cov(Xc);

[v,d]= eig(covm);
% Get the eigenvalues and make sure they
% are ordered.
% Also get the indexes of the sort,
% to re-order the columns of the eigenvector matrix.
[eigvals,inds] = sort(diag(d),'descend');

% Create the scree plot.
plot(1:9, eigvals ,'ko-')
title('Scree Plot - Glass Data')
xlabel('Index')
ylabel('Eigenvalue')

% Now calculate the cumulative percentage of variance.
pervar = 100*cumsum(eigvals)/sum(eigvals);

eigvecs = v(:,inds);
P3 = eigvecs(:,1:3);
Xp3 = Xc*P3;

#% Projection Pursuit EDA------------------------
% First load up a synthetic data set.
% This has structure - clusters - in two planes.
% Note that the data is in
% ppdata.mat
load ppdata
% For m random starts, find the best projection plane
% using N structure removal procedures.
% Find two structures:
N = 2;
% Four random starts:
m = 4;
c = tan(80*pi/180);
% Number of steps with no increase.
half = 30;

% To store the N structures:
[n,d] = size(X);
astar = zeros(d,N);
bstar = zeros(d,N);
ppmax = zeros(1,N);

% Sphere the data.
muhat = mean(X);
[V,D] = eig(cov(X));
Xc = X-ones(n,1)*muhat;
Z = ((D)^(-1/2)*V'*Xc')';

% Now do the PPEDA.
% Find a structure, remove it,
% and look for another one.
Zt = Z;
for i = 1:N
[astar(:,i),bstar(:,i),ppmax(i)] =...
csppeda(Zt,c,half,m);
% Now remove the structure.
Zt = csppstrtrem(Zt,astar(:,i),bstar(:,i));
end

% Now project and see the structure.
proj1 = [astar(:,1), bstar(:,1)];
proj2 = [astar(:,2), bstar(:,2)];
Zp1 = Z*proj1;
Zp2 = Z*proj2;
figure
plot(Zp1(:,1),Zp1(:,2),'k.'),title('Structure 1')
xlabel('\alpha^*'),ylabel('\beta^*')
figure
plot(Zp2(:,1),Zp2(:,2),'k.'),title('Structure 2')
xlabel('\alpha^*'),ylabel('\beta^*')

#% Independent Component Analysis----------------
% Load the data.
load icaexample

% Initialize weight vector and normalize.
w = randn(1,2);
w = w/norm(w);
% Specify the step size.
step = 0.02;
% Do projection pursuit using gradient ascent.
for iter=1:100
% Get estimated source signal, y. The matrix z is
% the spherized signal (see the file for details).
y = z*w';
% Get estimated kurtosis. Note that
% we can use a simplified form because
% the weight vector has unit length.
K = mean(y.^4)-3;
% Find gradient of kurtosis.
Ycube = repmat(y.^3,1,2);
grad = mean(Ycube.*z);
% Update w and normalize.
w = w + step*grad;
w = w/norm(w);
end

% Play back both signals to compare them.
soundsc(G(:,1),N); % This is the original signal.
soundsc(y,N); % This is the extracted signal.

#% Grand Tour----------------
% This is for the iris data.
load iris
% Put data into one matrix.
x = [setosa;virginica;versicolor];
% Set up vector of frequencies.
th = sqrt([2 3]);
% Set up other constants.
[n,d] = size(x);
% This is a small irrational number:
delt = eps*10^14;
% Do the tour for some specified time steps.
maxit = 1000;
cof = sqrt(2/d);
% Set up storage space for projection vectors.
a = zeros(d,1);
b = zeros(d,1);
z = zeros(n,2);

% Get an initial plot, so the tour can be implemented
% using Handle Graphics.
Hlin1 = plot(z(1:50,1),z(1:50,2),'ro');
set(gcf,'backingstore','off')
set(gca,'Drawmode','fast')
hold on
Hlin2 = plot(z(51:100,1),z(51:100,2),'go');
Hlin3 = plot(z(101:150,1),z(101:150,2),'bo');
hold off
axis equal
axis vis3d
axis off

for t = 0:delt:(delt*maxit)
% Find the transformation vectors.
for j = 1:d/2
a(2*(j-1)+1) = cof*sin(th(j)*t);
a(2*j) = cof*cos(th(j)*t);
b(2*(j-1)+1) = cof*cos(th(j)*t);
b(2*j) = cof*(-sin(th(j)*t));
end
% Project onto the vectors.
z(:,1) = x*a;
z(:,2) = x*b;
set(Hlin1,'xdata',z(1:50,1),'ydata',z(1:50,2))
set(Hlin2,'xdata',z(51:100,1),'ydata',z(51:100,2))
set(Hlin3,'xdata',z(101:150,1),'ydata',z(101:150,2))
drawnow
end

#% Nonlinear Dimensionality Reduction--------------------------


page 213


















































%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------#

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------

%----------------------------------------------------------------------------------------------------------------------------------
% Chapter 1: ----------------------------------------------------------------------------------------------------------------------
%----------------------------------------------------------------------------------------------------------------------------------
